while ( theStack.size( ) > 0 )
				{
					Object s = theStack.get( theStack.size( ) - 1 );
					if ( s instanceof Integer )
					{
						Integer stackTop = ( Integer ) s;
						XpgParsingTableRow row = getParsingtable( ).get( stackTop );
						
						
						
						for ( XpgParsingTableState substate : row.getSubstates( ) )
						{
							XpgNextEntry next = substate.getNextEntry( );
							if ( next == null )
							{
								getResult( ).add( new ResultObject( "ERROR", ResultObject.LEVEL_ERROR ) );
								return;
							}
							else if ( next.isEmpty( ) )
							{
								//								getResult( ).add( new ResultObject( "REDUCE", ResultObject.LEVEL_INFO ) );
								int idx = theStack.size( ) - 3;
								Object o = theStack.get( idx );

								XpgParsingTableRow r = getParsingtable( ).get( ( int ) o );
								theStack.set( theStack.size( ) - 2, r.getSubstates( ).get( 0 ).getNextEntry( ).getX( ) );
								ArrayList< HashMap< XpgElem, XpgGotoEntry > > gtEntries = r.getSubstates( ).get( 0 ).getGotoEntry( );
								for ( HashMap< XpgElem, XpgGotoEntry > gotoEntry : gtEntries )
								{
									if ( gotoEntry.containsKey( r.getSubstates( ).get( 0 ).getNextEntry( ).getX( ) ) )
									{
										theStack.set( theStack.size( ) - 1, gotoEntry.get( r.getSubstates( ).get( 0 ).getNextEntry( ).getX( ) ).getState( ) );
									}
								}

								return;
							}
							else
							{
								XpgActionEntry fetch = fetchVSymbol( substate );
								if ( fetch != null )
								{
									ArrayList< XpgActionContent > c = fetch.getContent( );
									if ( c.get( 0 ).getState( ) == - 1 )
										return;

									for ( XpgActionContent action : c )
									{
										getResult( ).add( new ResultObject( "\n", ResultObject.LEVEL_NONE ) );
										switch ( action.getOperation( ) )
										{
											case ACCEPT:
												getResult( ).add( new ResultObject( "SUCCESS", ResultObject.LEVEL_INFO ) );
												return;
											case ERROR:
												getResult( ).add( new ResultObject( "ERROR", ResultObject.LEVEL_ERROR ) );
												return;
											case REDUCE:
												getResult( ).add( new ResultObject( "REDUCE", ResultObject.LEVEL_WARNING ) );
												return;
											case SHIFT:
												getResult( ).add( new ResultObject( "Shift action: ".concat( action.toString( ) ), ResultObject.LEVEL_INFO ) );
												XpgElem tester = action.getRelTester( );

												if ( tester.getContent( ) == null || tester.getContent( ).equals( "T" ) )
												{
													theStack.add( next.getX( ) );
													theStack.add( action.getState( ) );
												}
												else if ( test( null ) )
												{
													System.out.println( "WRONG OPINION OF ME" );
													//	theStack.add( next.getX( ) );
													//	theStack.add( action.getState( ) );
													// TODO verificare se i miei tester sono sempre T o se va implementata anche questa parte
												}
												else
												{
													throw new SyntaxErrorException( "if ( tester.getContent( ) == null || tester.getContent( ).equals( \"T\" ) )" );
												}

												break;
											default:
												throw new SyntaxErrorException( "switch ( action.getOperation( ) )" );
										}
									}
								}
								else
									throw new SyntaxErrorException( "Error by parsing substate" );
							}

						}
					}
					else
						getResult( ).add( new ResultObject( "if ( s instanceof Integer )", ResultObject.LEVEL_ERROR ) );

					// for debug purposes
					getResult( ).add( new ResultObject( "\n", ResultObject.LEVEL_NONE ) );
					getResult( ).add( new ResultObject( "Dictionary at this state:", ResultObject.LEVEL_INFO ) );
					for ( DictionaryEntry e : getDictionary( ).getEntries( ) )
					{
						if ( e.getAttributes( ) != null )
						{
							for ( Attribute attr : e.getAttributes( ) )
							{
								if ( attr.getName( ).equalsIgnoreCase( "layer" ) )
								{
									break;
								}
							}
						}

						result.add( new ResultObject( e.toString( ), ResultObject.LEVEL_INFO ) );

						if ( e.getAttributes( ) != null )
							for ( Attribute attr : e.getAttributes( ) )
							{
								result.add( new ResultObject( attr.toString( ), ResultObject.LEVEL_INFO ) );
							}
					}
					getResult( ).add( new ResultObject( "\n", ResultObject.LEVEL_NONE ) );
					for ( Object object : theStack )
					{
						result.add( new ResultObject( object.toString( ), ResultObject.LEVEL_INFO ) );
					}
				}
				
				
				
				
				
				private XpgActionEntry fetchVSymbol(XpgParsingTableState next) throws UnparsedInputException
	{

		if ( next.getNextEntry( ).getDriverRelation( ) == null )
		{
			return null;
		}
		else if ( next.getNextEntry( ).getDriverRelation( ).toString( ).equalsIgnoreCase( "start" ) )
		{
			for ( DictionaryEntry entry : getDictionary( ).getEntries( ) )
			{
				if ( ! entry.isVisited( ) )
					if ( entry.getTerminalName( ) != null )
						for ( HashMap< XpgElem, XpgActionEntry > e : next.getActionEntry( ) )
							if ( e.get( entry.getTerminalName( ) ) != null )
								return e.get( entry.getTerminalName( ) );
			}
		}
		else if ( next.getNextEntry( ).getDriverRelation( ).toString( ).equalsIgnoreCase( "EOI" ) )
		{
			for ( DictionaryEntry entry : getDictionary( ).getEntries( ) )
			{
				if ( ! entry.isVisited( ) )
					throw new UnparsedInputException( );

				XpgActionEntry rv = new XpgActionEntry( );
				rv.getContent( ).add( new XpgActionContent( - 1, new XpgElem( "EOI" ) ) );
				return rv;
			}
		}
		else
		{
			XpgElem driver = next.getNextEntry( ).getDriverRelation( );
			XpgElem x = next.getNextEntry( ).getX( );
			boolean morethanOne = false;
			XpgElem z_i = ( XpgElem ) theStack.get( theStack.size( ) - 2 );

			//(next = (contains, lamp))

			if ( next.getNextEntry( ).getX( ).getClass( ).isAssignableFrom( XpgNonTerminal.class ) )
			{

			}
			else if ( next.getNextEntry( ).getX( ).getClass( ).isAssignableFrom( XpgTerminal.class ) )
			{
				for ( DictionaryEntry entry : getDictionary( ).getEntries( ) )
				{
					if ( ! entry.isVisited( ) )
					{
						if ( entry.getAttributes( ).contains( x ) )
						{
							entry.setVisited( true );

							XpgActionEntry rv = new XpgActionEntry( );
							rv.getContent( ).add( new XpgActionContent( - 1, new XpgElem( "" ) ) );
							return rv;

						}
					}

				}

			}
			//
			//			System.out.println( "NEXT " + next.toString( ) );
			//			return new XpgActionEntry( );
		}

		return null;

	}